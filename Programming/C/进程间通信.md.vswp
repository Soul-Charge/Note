vnote_backup_file_826537664 D:/other/VNote/Note/Programming/C/进程间通信.md
# 进程间通信
## 重定向与文件描述符
### 文件描述符
文件描述符表：  

|  #  | 文件描述符名 | 数据流 |
| :-: | :---------: | :---: |
|  0  |   标准输入   |  键盘  |
|  1  |   标准输出   |  屏幕  |
|  2  |   标准错误   |  屏幕  |
| ... |     ...     |  ...  |

进程用文件描述符表示数据流，将文件描述符和对应的数据流保存在描述符表中。  
文件描述符对应的数据流不一定是文件，可能是设备、文件指针、网络。  
描述符表的前三项不变，其他项为空或连接进程打开的数据流。  
创建进程后，前三项与数据流的连接不变，直到被重定向修改。  

### 重定向—替换文件描述符连接的数据流
标准输入/输出/错误在描述符表中的位置固定(0,1,2)，但连接的数据流可以改变。  

#### 重定向运算符
##### >
重定向到的数据流内容将先被清空。  

###### 标准输出重定向
```
/* 将标准输出重定向到文件 */
/* 下面两句效果相同 */
ls > out_ls.txt
ls 1> out_ls.txt
```
描述符表中修改：  

|  #  | 文件描述符名 |          数据流          |
| :-: | :---------: | :---------------------: |
|  0  |   标准输入   |           键盘           |
|  1  |   标准输出   | ~~屏幕~~(out_ls.txt文件) |
|  2  |   标准错误   |           屏幕           |
| ... |     ...     |           ...           |

###### 标准错误重定向
使用标准错误的文件描述符。  
```
/* 将标准错误重定向到文件 */
ls 2> err_ls.txt
```

描述符表中修改：  

|  #  | 文件描述符名 | 数据流 |
| :-: | :---------: | :---: |
|  0  |   标准输入   |  键盘  |
|  1  |   标准输出   |  屏幕  |
|  2  |   标准错误   |  ~~屏幕~~ (err_ls.txt文件)  |
| ... |     ...     |  ...  |

在类Unix系统中，可以用下面命令将标准错误重定向到标准输出。  
```
ls 2>&1
2> ：重定向标准错误
&1 ：到标准输出
```
##### <
```
get_input < input.txt
/* 将标准输入重定向为文件 */
```

##### >>
差别在于会以追加模式进行重定向。  

#### 操作文件描述符表的函数
##### fileno()——返回文件描述符
头文件：stdio.h  
每打开一个文件，操作系统会在描述符表中新注册一项，可使用fileno()用文件指针得到描述符。  
>例：打开文件guitar.mp3后描述符表的情况
>```c
>FILE * my_file = fopen("guitar.mp3, "r");
>```
>|  #  |     数据流     |
>| :-: | :------------: |
>| 略  |       略       |
>|  3  |   数据库连接    |
>|  4  | guitar.mp3文件 |
>| 略  |       略       |
>```c
>fileno(my_file); //将返回4
>```

##### dup2()——复制数据流
头文件：unistd.h  
可以复制描述符的数据流到另一个描述符。  
>例：描述符表见上
>```c
>dup2(4, 3);
>/* 把4号描述符的数据流复制到3号描述符 */
>```
>|  #  |            数据流            |
>| :-: | :-------------------------: |
>| 略  |              略              |
>|  3  | ~~数据库连接~~ guitar.mp3文件 |
>|  4  |        guitar.mp3文件        |
>| 略  |              略              |

##### 使用相关
对标准输出重定向后，使用标准输出的函数输出内容将在文件头部开始添加内容。  
<font color='green'>*//输出内容的顺序不会变，只是整体都在原内容前*</font>
<font color='orange'>还会把原内容删掉？</font>




