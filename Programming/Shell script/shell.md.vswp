vnote_backup_file_826537664 D:/other/VNote/Note/Programming/Shell script/shell.md
# shell
## 初步
### shebang
shell脚本的第一行：以`#!`起始。  
通常形式：
```
#!/bin/bash //即Bash的路径
```
运行shell脚本时，shell程序会先查看shebang行，然后使用对应的脚本运行shell脚本。  

>例：script.sh的shebang行：#!bin/bash
>运行：`$ ./script.sh`
>会替换为：`/bin/bash/script.sh`
shebang：#(sharp) !(bang)  

### 命令的分隔
用换行符或分号进行分隔。  

### 运行shell 脚本
#### 作为命令行参数
```
$ sh .sh文件名
$ sh .sh文件的完整路径
```

#### 作为可执行文件独立运行
##### 确保具有执行权限
```
$ chmod a+x .sh文件名
```
给所有用户该文件的执行权限。  

##### 执行
```
./文件名 (当前目录)
完整路径/文件名 (使用完整路径)
```

## 终端打印
### echo
```
echo 打印内容
```
打印内容可以用双引号或单引号包围，也可以没有。  
echo在默认情况下会在最后添加一个换行符。  

#### 使用单引号、双引号、或不用的差别
* 单引号
    单引号内的内容将一致输出，无法使用变量和使用`\`进行转义。  
* 双引号
    可以进行转义和使用变量。  
    可以直接输出感叹号。  
* 不用
    与使用双引号的区别可能就在于不能输出分号。  
    <font color='red'>分号作为命令的分隔符。</font>  
    要输出感叹号需要用反斜杠转义。  

#### 使用标志
```
echo 标志 输出内容
```
标志应在字符串前。  
* `-n`
    使末尾不会自动添加换行符。  
* `-e`
    使echo可以使用双引号内的转义序列。  

#### 打印彩色输出
```
echo -e "\e[1;颜色码m输出内容\e[0m"
```
后面的`\e[0m`是将颜色置回。  
| 颜色码 | 颜色(字体) | 颜色(背景) |
| ------- | ---------- | ----------- |
| 0 | 重置 | 重置 |
| 30 | 黑色 | --- |
| 31 | 红色 | --- |
| 32 | 绿色 | --- |
| 33 | 黄色 | --- |
| 34 | 蓝色 | --- |
| 35 | 洋红 | --- |
| 36 | 青色 | --- |
| 37 | 白色 | --- |
| 40 | --- | 黑色 |
| 41 | --- | 红色 |
| 42 | --- | 绿色 |
| 43 | --- | 黄色 |
| 44 | --- | 蓝色 |
| 45 | --- | 洋红 |
| 46 | --- | 青色 |
| 47 | --- | 白色 |





### printf
除了用空格分隔参数、没有括号、格式化字符串的参数字符(串)不需要(双)引号。  
>例：
>`printf "%s" hello
>输出：hello(没有换行符)


## 运算符
### 算数运算符
使用方式:`expr 值 运算符 值`  
<font color='green'>*//注意有空格*</font>  
功能与C里的一样。  
<font color='orange'>`==`和`!=`应该也是算数运算符，因为只有用expr这种方式才能正常使用</font>
|  运算符 | 功能 | --- |
| --- | --- | --- |
| + | --- | --- |
| - | --- | --- |
| \* | --- | --- |
| / | --- | --- |
| % | --- | --- |
| = | --- | --- |
| == | --- | --- |
| != | --- | --- |

### 关系运算符
